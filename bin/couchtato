#!/usr/bin/env node

var DEFAULT_PAGE_SIZE = 500,
    DEFAULT_NUM_PAGES = -1,
    DEFAULT_DRIVER = 'cradle',
    DEFAULT_FILE = 'couchtato.js',
    DEFAULT_URL = 'http://localhost:5984/db',
    DEFAULT_ENCODING = 'utf-8',
    fs = require('fs'),
    nomnom = require('nomnom'),
    path = require('path'),
    Conf = require('../lib/conf').Conf,
    Couchtato = require('../lib/couchtato').Couchtato,
    Report = require('../lib/report').Report,
    base = process.cwd(),
    conf = new Conf(),
    confFile = path.join(base, 'couchtato.js'),
    couchtato, args, opts, conf, options, doInit, doIterate;

doInit = function (args) {
    conf.init((args.file) ? path.join(process.cwd(), args.file) : confFile);
};

doIterate = function (args) {
    options = {
        tasks: conf.read((args.file) ? path.join(process.cwd(), args.file) : confFile).tasks,
        url: args.url || DEFAULT_URL,
        pageSize: args.pageSize || DEFAULT_PAGE_SIZE,
        numPages: args.numPages || DEFAULT_NUM_PAGES,
        driver: args.driver || DEFAULT_DRIVER,
        encoding: DEFAULT_ENCODING
    };
    couchtato = new Couchtato(
        options,
        new (require('../lib/stool/' + (options.driver || 'cradle')).Stool)(options.url),
        new Report());
    couchtato.iterate();
};

opts = {
    file: {
        string: '-f FILE',
        help: 'Configuration file, default: ' + DEFAULT_FILE
    },
    url: {
        string: '-u URL',
        help: 'CouchDB URL http(s)://user:pass@host:port/db'
    },
    pageSize: {
        string: '-p PAGE_SIZE',
        help: 'The number of documents per page, default: ' + DEFAULT_PAGE_SIZE
    },
    numPages: {
        string: '-n NUM_PAGES',
        help: 'The number of pages to iterate, default: ' + DEFAULT_NUM_PAGES + ' (all)'
    },
    driver: {
        string: '-d DRIVER',
        help: 'CouchDB driver module, default: ' + DEFAULT_DRIVER
    },
    version: {
        abbr: 'v',
        help: 'Couchtato version number',
        callback: function () {
            return JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'))).version;
        }
    }
};

nomnom.scriptName('couchtato');
nomnom.globalOpts(opts);
nomnom.command('init').callback(doInit);
nomnom.command('iterate').callback(doIterate);
nomnom.parseArgs();