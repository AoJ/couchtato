#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    Conf = require('../lib/conf').Conf,
    Couchtato = require('../lib/couchtato').Couchtato,
    args = process.argv.slice(2),
    base = process.cwd(),
    confFile = path.join(base, 'couchtato.js'),
    usage, conf, options, couchtato, doInit, doIterate;

usage = 'Usage: couchtato [options]\n'
    + '\n'
    + 'Options:\n'
    + '  -u, --url      CouchDB URL http(s)://host:port/path\n'
    + '  -p, --pagesize The number of documents per page\n'
    + '  -h, --help     Display help info\n';
    
abort = function (message) {
    console.error(message);
    process.exit(1);
};

while (args.length) {
    var arg = args.shift();
    switch (arg) {
        case 'init':
            args.action = arg;
            break;
        case '-u':
        case '--url':
            args.length
                ? (args.url = args.shift())
                : abort('--url requires an argument');
            break;
        case '-p':
        case '--pagesize':
            args.length
                ? (args.pageSize = parseInt(args.shift()))
                : abort('--pageSize requires an argument');
            break;
        case '-h':
        case '--help':
            abort(usage);
            break;
    }
}

doInit = function () {
    console.log('Creating couchtato.js config file...');
    fs.writeFileSync('couchtato.js', 'exports.conf = {"tasks": {"all_docs": {"fn": function (db, doc) {console.log(doc);}}}};');
};

doIterate = function () {
    options = {
        url: args.url,
        tasks: new Conf().read(confFile).tasks,
        pageSize: args.pageSize || 500,
        encoding: 'utf-8'
    };
    couchtato = new Couchtato(options);
    couchtato.iterate();
};

switch (args.action) {
    case 'init':
        doInit();
        break;
    case undefined:
        doIterate();
        break;
}